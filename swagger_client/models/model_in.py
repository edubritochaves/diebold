# coding: utf-8

"""
    SERVCore NG

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 4.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ModelIn(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, trn=None, chn=None, inst=None, unit=None, cat=None, filter=None, prior=None, token=None, _not=None):
        """
        ModelIn - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'trn': 'float',
            'chn': 'float',
            'inst': 'float',
            'unit': 'str',
            'cat': 'float',
            'filter': 'float',
            'prior': 'float',
            'token': 'str',
            '_not': 'float'
        }

        self.attribute_map = {
            'trn': 'trn',
            'chn': 'chn',
            'inst': 'inst',
            'unit': 'unit',
            'cat': 'cat',
            'filter': 'filter',
            'prior': 'prior',
            'token': 'token',
            '_not': 'not'
        }

        self._trn = trn
        self._chn = chn
        self._inst = inst
        self._unit = unit
        self._cat = cat
        self._filter = filter
        self._prior = prior
        self._token = token
        self.__not = _not

    @property
    def trn(self):
        """
        Gets the trn of this ModelIn.
        (Obrigatório) Identificação da Transação<br>8000 - Obtêm a lista de senhas<br>8001 - Solicita uma senha

        :return: The trn of this ModelIn.
        :rtype: float
        """
        return self._trn

    @trn.setter
    def trn(self, trn):
        """
        Sets the trn of this ModelIn.
        (Obrigatório) Identificação da Transação<br>8000 - Obtêm a lista de senhas<br>8001 - Solicita uma senha

        :param trn: The trn of this ModelIn.
        :type: float
        """

        self._trn = trn

    @property
    def chn(self):
        """
        Gets the chn of this ModelIn.
        (Obrigatório) Canal a ser acessado<br>1 - CRM<br>2 - GONDOLA<br>3 - FEEDBACK<br>4 - MOBILE<br>5 - GESTÃO<br>6 - BACKOFFICE<br>7 - SORTEXT

        :return: The chn of this ModelIn.
        :rtype: float
        """
        return self._chn

    @chn.setter
    def chn(self, chn):
        """
        Sets the chn of this ModelIn.
        (Obrigatório) Canal a ser acessado<br>1 - CRM<br>2 - GONDOLA<br>3 - FEEDBACK<br>4 - MOBILE<br>5 - GESTÃO<br>6 - BACKOFFICE<br>7 - SORTEXT

        :param chn: The chn of this ModelIn.
        :type: float
        """

        self._chn = chn

    @property
    def inst(self):
        """
        Gets the inst of this ModelIn.
        (Opcional) Instituição de acesso. Caso não seja informado será considerada a instituição default do sistema.

        :return: The inst of this ModelIn.
        :rtype: float
        """
        return self._inst

    @inst.setter
    def inst(self, inst):
        """
        Sets the inst of this ModelIn.
        (Opcional) Instituição de acesso. Caso não seja informado será considerada a instituição default do sistema.

        :param inst: The inst of this ModelIn.
        :type: float
        """

        self._inst = inst

    @property
    def unit(self):
        """
        Gets the unit of this ModelIn.
        (Obrigatório) Sigla da loja.

        :return: The unit of this ModelIn.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """
        Sets the unit of this ModelIn.
        (Obrigatório) Sigla da loja.

        :param unit: The unit of this ModelIn.
        :type: str
        """

        self._unit = unit

    @property
    def cat(self):
        """
        Gets the cat of this ModelIn.
        Categoria do setor.<br>Para transação 8000 o campo é opcional, caso o mesmo não seja informado serão retornadas senhas para todas as categorias.<br>Para transação 8001 o campo é obrigatório.

        :return: The cat of this ModelIn.
        :rtype: float
        """
        return self._cat

    @cat.setter
    def cat(self, cat):
        """
        Sets the cat of this ModelIn.
        Categoria do setor.<br>Para transação 8000 o campo é opcional, caso o mesmo não seja informado serão retornadas senhas para todas as categorias.<br>Para transação 8001 o campo é obrigatório.

        :param cat: The cat of this ModelIn.
        :type: float
        """

        self._cat = cat

    @property
    def filter(self):
        """
        Gets the filter of this ModelIn.
        (Opcional) Campo utilizado apenas para transação 8001.<br>0 - não retorna a lista de senhas (Default).<br>1 - Retorna a lista de senhas para a categoria e a loja informada.<br>2 - Retorna a lista de senhas para todas as categorias e a loja informada.

        :return: The filter of this ModelIn.
        :rtype: float
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """
        Sets the filter of this ModelIn.
        (Opcional) Campo utilizado apenas para transação 8001.<br>0 - não retorna a lista de senhas (Default).<br>1 - Retorna a lista de senhas para a categoria e a loja informada.<br>2 - Retorna a lista de senhas para todas as categorias e a loja informada.

        :param filter: The filter of this ModelIn.
        :type: float
        """

        self._filter = filter

    @property
    def prior(self):
        """
        Gets the prior of this ModelIn.
        (Opcional) Prioridade da senha.<br>0 - Normal<br>1 - Prioritária<br>Para transação 8000 caso o mesmo não seja informado serão retornadas todas as senhas indepentende da prioridade.<br>Para a transação 8001 caso o mesmo não seja informado será solicitada uma senha com prioridade normal.

        :return: The prior of this ModelIn.
        :rtype: float
        """
        return self._prior

    @prior.setter
    def prior(self, prior):
        """
        Sets the prior of this ModelIn.
        (Opcional) Prioridade da senha.<br>0 - Normal<br>1 - Prioritária<br>Para transação 8000 caso o mesmo não seja informado serão retornadas todas as senhas indepentende da prioridade.<br>Para a transação 8001 caso o mesmo não seja informado será solicitada uma senha com prioridade normal.

        :param prior: The prior of this ModelIn.
        :type: float
        """

        self._prior = prior

    @property
    def token(self):
        """
        Gets the token of this ModelIn.
        (Opcional) Token seguro gerado pelo FCM (Firebase Cloud Messaging).<br>Caso não seja informado nenhuma notificação será enviada para um cliente Web ou Dispositivo IOS/Android.

        :return: The token of this ModelIn.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """
        Sets the token of this ModelIn.
        (Opcional) Token seguro gerado pelo FCM (Firebase Cloud Messaging).<br>Caso não seja informado nenhuma notificação será enviada para um cliente Web ou Dispositivo IOS/Android.

        :param token: The token of this ModelIn.
        :type: str
        """

        self._token = token

    @property
    def _not(self):
        """
        Gets the _not of this ModelIn.
        (Opcional) Regra de notificação via FCM.<br>Caso o campo não seja informado o valor padrão será X.<br>Campo é composto por uma lógica binária:<br>bit 0 - 1 - notificar ou 0 - não notificar<br>bit 1 2 3 - número de senhas para ser notificado.<br>Exemplos:<br>0 1 0 - será notificado 2 senhas antes da solicitada.<br>0 1 1 -  será notificado 3 senhas antes da solicitada.<br>bit 4 - 0 - notificação sem som 1 - notificação com som.

        :return: The _not of this ModelIn.
        :rtype: float
        """
        return self.__not

    @_not.setter
    def _not(self, _not):
        """
        Sets the _not of this ModelIn.
        (Opcional) Regra de notificação via FCM.<br>Caso o campo não seja informado o valor padrão será X.<br>Campo é composto por uma lógica binária:<br>bit 0 - 1 - notificar ou 0 - não notificar<br>bit 1 2 3 - número de senhas para ser notificado.<br>Exemplos:<br>0 1 0 - será notificado 2 senhas antes da solicitada.<br>0 1 1 -  será notificado 3 senhas antes da solicitada.<br>bit 4 - 0 - notificação sem som 1 - notificação com som.

        :param _not: The _not of this ModelIn.
        :type: float
        """

        self.__not = _not

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
