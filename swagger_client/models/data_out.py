# coding: utf-8

"""
    SERVCore NG

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 4.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class DataOut(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, output_data=None, message=None, exception=None, response_code=None):
        """
        DataOut - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'output_data': 'OutputData',
            'message': 'list[Message]',
            'exception': 'list[Message]',
            'response_code': 'float'
        }

        self.attribute_map = {
            'output_data': 'OUTPUT_DATA',
            'message': 'MESSAGE',
            'exception': 'EXCEPTION',
            'response_code': 'RESPONSE_CODE'
        }

        self._output_data = output_data
        self._message = message
        self._exception = exception
        self._response_code = response_code

    @property
    def output_data(self):
        """
        Gets the output_data of this DataOut.
        Dados de saída

        :return: The output_data of this DataOut.
        :rtype: OutputData
        """
        return self._output_data

    @output_data.setter
    def output_data(self, output_data):
        """
        Sets the output_data of this DataOut.
        Dados de saída

        :param output_data: The output_data of this DataOut.
        :type: OutputData
        """

        self._output_data = output_data

    @property
    def message(self):
        """
        Gets the message of this DataOut.
        (Opcional) Pode ser retornado mais de uma mensagem, porém para os serviços aqui descritos será retornado somente uma mensagem.<br><br>MESSAGE_CODE MESSAGE_TEXT TRANSAÇÃO<br>-4 INVALID_CHANNEL Todas<br>-4 INVALID_IF Todas<br>-4 INVALID_TRANSACTION Todas<br>-4 INVALID_UNIT Todas<br>-4 INVALID_CATEGORY Todas<br>-4 INVALID_PRIORITY Todas<br>-4 TRANSACTION_NOT_PERMMITED Todas<br>-4 QUEUE_EMPTY 8000<br><br>OBS. Quando o campo MESSAGE é retornado o RESPONSE_CODE será 1.

        :return: The message of this DataOut.
        :rtype: list[Message]
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this DataOut.
        (Opcional) Pode ser retornado mais de uma mensagem, porém para os serviços aqui descritos será retornado somente uma mensagem.<br><br>MESSAGE_CODE MESSAGE_TEXT TRANSAÇÃO<br>-4 INVALID_CHANNEL Todas<br>-4 INVALID_IF Todas<br>-4 INVALID_TRANSACTION Todas<br>-4 INVALID_UNIT Todas<br>-4 INVALID_CATEGORY Todas<br>-4 INVALID_PRIORITY Todas<br>-4 TRANSACTION_NOT_PERMMITED Todas<br>-4 QUEUE_EMPTY 8000<br><br>OBS. Quando o campo MESSAGE é retornado o RESPONSE_CODE será 1.

        :param message: The message of this DataOut.
        :type: list[Message]
        """

        self._message = message

    @property
    def exception(self):
        """
        Gets the exception of this DataOut.
        (Opcional) Quando acontece uma exceção tratada ou não tratada.<br><br>MESSAGE_CODE MESSAGE_TEXT TRANSAÇÃO<br>-3 Exception tratada Todas<br>-3 GENERIC_ERROR Todas<br>OBS. Quando o campo EXCEPTION é retornado o RESPONSE_CODE é -1.

        :return: The exception of this DataOut.
        :rtype: list[Message]
        """
        return self._exception

    @exception.setter
    def exception(self, exception):
        """
        Sets the exception of this DataOut.
        (Opcional) Quando acontece uma exceção tratada ou não tratada.<br><br>MESSAGE_CODE MESSAGE_TEXT TRANSAÇÃO<br>-3 Exception tratada Todas<br>-3 GENERIC_ERROR Todas<br>OBS. Quando o campo EXCEPTION é retornado o RESPONSE_CODE é -1.

        :param exception: The exception of this DataOut.
        :type: list[Message]
        """

        self._exception = exception

    @property
    def response_code(self):
        """
        Gets the response_code of this DataOut.
        UNSUCCESSFULLY(-1)<br>SUCCESSFULLY(0)<br>SUCCESSFULLY_WARNING(1)<br>SUCCESSFULLY_EMPTY_DATA(2)

        :return: The response_code of this DataOut.
        :rtype: float
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """
        Sets the response_code of this DataOut.
        UNSUCCESSFULLY(-1)<br>SUCCESSFULLY(0)<br>SUCCESSFULLY_WARNING(1)<br>SUCCESSFULLY_EMPTY_DATA(2)

        :param response_code: The response_code of this DataOut.
        :type: float
        """

        self._response_code = response_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
