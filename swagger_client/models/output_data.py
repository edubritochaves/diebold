# coding: utf-8

"""
    SERVCore NG

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 4.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class OutputData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, queues=None, queue=None):
        """
        OutputData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'queues': 'list[Queue]',
            'queue': 'Queue'
        }

        self.attribute_map = {
            'queues': 'queues',
            'queue': 'queue'
        }

        self._queues = queues
        self._queue = queue

    @property
    def queues(self):
        """
        Gets the queues of this OutputData.
        Lista de senhas atual.<br>Para transação 8000 este campo sempre será retornado baseado no filtro de entrada<br>Para a transação 8001 este campo será retornado baseado no campo filter.

        :return: The queues of this OutputData.
        :rtype: list[Queue]
        """
        return self._queues

    @queues.setter
    def queues(self, queues):
        """
        Sets the queues of this OutputData.
        Lista de senhas atual.<br>Para transação 8000 este campo sempre será retornado baseado no filtro de entrada<br>Para a transação 8001 este campo será retornado baseado no campo filter.

        :param queues: The queues of this OutputData.
        :type: list[Queue]
        """

        self._queues = queues

    @property
    def queue(self):
        """
        Gets the queue of this OutputData.
        Senha obtida para a loja, categoria e prioridade informada.<br>Este campo só é retornado para a transação 8001.

        :return: The queue of this OutputData.
        :rtype: Queue
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """
        Sets the queue of this OutputData.
        Senha obtida para a loja, categoria e prioridade informada.<br>Este campo só é retornado para a transação 8001.

        :param queue: The queue of this OutputData.
        :type: Queue
        """

        self._queue = queue

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
