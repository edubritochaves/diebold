=begin comment

SERVCore NG

No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 4.1

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::Object::In;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use base ("Class::Accessor", "Class::Data::Inheritable");


#
#
#
# NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
# REF: https://github.com/swagger-api/swagger-codegen
#

=begin comment

SERVCore NG

No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 4.1

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('swagger_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new object
sub new { 
    my ($class, %args) = @_; 

	my $self = bless {}, $class;
	
	foreach my $attribute (keys %{$class->attribute_map}) {
		my $args_key = $class->attribute_map->{$attribute};
		$self->$attribute( $args{ $args_key } );
	}
	
	return $self;
}  

# return perl hash
sub to_hash {
    return decode_json(JSON->new->convert_blessed->encode( shift ));
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }
    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use swagger_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->swagger_types} ) {
    	my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[/i) { # array
            my $_subclass = substr($_type, 6, -1);
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
        	$log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);
        
    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "WWW::SwaggerClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => '',
                                  class => 'In',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'trn' => {
    	datatype => 'Number',
    	base_name => 'trn',
    	description => '(Obrigatório) Identificação da Transação&lt;br&gt;8000 - Obtêm a lista de senhas&lt;br&gt;8001 - Solicita uma senha',
    	format => '',
    	read_only => '',
    		},
    'chn' => {
    	datatype => 'Number',
    	base_name => 'chn',
    	description => '(Obrigatório) Canal a ser acessado&lt;br&gt;1 - CRM&lt;br&gt;2 - GONDOLA&lt;br&gt;3 - FEEDBACK&lt;br&gt;4 - MOBILE&lt;br&gt;5 - GESTÃO&lt;br&gt;6 - BACKOFFICE&lt;br&gt;7 - SORTEXT',
    	format => '',
    	read_only => '',
    		},
    'inst' => {
    	datatype => 'Number',
    	base_name => 'inst',
    	description => '(Opcional) Instituição de acesso. Caso não seja informado será considerada a instituição default do sistema.',
    	format => '',
    	read_only => '',
    		},
    'unit' => {
    	datatype => 'string',
    	base_name => 'unit',
    	description => '(Obrigatório) Sigla da loja.',
    	format => '',
    	read_only => '',
    		},
    'cat' => {
    	datatype => 'Number',
    	base_name => 'cat',
    	description => 'Categoria do setor.&lt;br&gt;Para transação 8000 o campo é opcional, caso o mesmo não seja informado serão retornadas senhas para todas as categorias.&lt;br&gt;Para transação 8001 o campo é obrigatório.',
    	format => '',
    	read_only => '',
    		},
    'filter' => {
    	datatype => 'Number',
    	base_name => 'filter',
    	description => '(Opcional) Campo utilizado apenas para transação 8001.&lt;br&gt;0 - não retorna a lista de senhas (Default).&lt;br&gt;1 - Retorna a lista de senhas para a categoria e a loja informada.&lt;br&gt;2 - Retorna a lista de senhas para todas as categorias e a loja informada.',
    	format => '',
    	read_only => '',
    		},
    'prior' => {
    	datatype => 'Number',
    	base_name => 'prior',
    	description => '(Opcional) Prioridade da senha.&lt;br&gt;0 - Normal&lt;br&gt;1 - Prioritária&lt;br&gt;Para transação 8000 caso o mesmo não seja informado serão retornadas todas as senhas indepentende da prioridade.&lt;br&gt;Para a transação 8001 caso o mesmo não seja informado será solicitada uma senha com prioridade normal.',
    	format => '',
    	read_only => '',
    		},
    'token' => {
    	datatype => 'string',
    	base_name => 'token',
    	description => '(Opcional) Token seguro gerado pelo FCM (Firebase Cloud Messaging).&lt;br&gt;Caso não seja informado nenhuma notificação será enviada para um cliente Web ou Dispositivo IOS/Android.',
    	format => '',
    	read_only => '',
    		},
    'not' => {
    	datatype => 'Number',
    	base_name => 'not',
    	description => '(Opcional) Regra de notificação via FCM.&lt;br&gt;Caso o campo não seja informado o valor padrão será X.&lt;br&gt;Campo é composto por uma lógica binária:&lt;br&gt;bit 0 - 1 - notificar ou 0 - não notificar&lt;br&gt;bit 1 2 3 - número de senhas para ser notificado.&lt;br&gt;Exemplos:&lt;br&gt;0 1 0 - será notificado 2 senhas antes da solicitada.&lt;br&gt;0 1 1 -  será notificado 3 senhas antes da solicitada.&lt;br&gt;bit 4 - 0 - notificação sem som 1 - notificação com som.',
    	format => '',
    	read_only => '',
    		},
});

__PACKAGE__->swagger_types( {
    'trn' => 'Number',
    'chn' => 'Number',
    'inst' => 'Number',
    'unit' => 'string',
    'cat' => 'Number',
    'filter' => 'Number',
    'prior' => 'Number',
    'token' => 'string',
    'not' => 'Number'
} );

__PACKAGE__->attribute_map( {
    'trn' => 'trn',
    'chn' => 'chn',
    'inst' => 'inst',
    'unit' => 'unit',
    'cat' => 'cat',
    'filter' => 'filter',
    'prior' => 'prior',
    'token' => 'token',
    'not' => 'not'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
