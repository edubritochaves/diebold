<?php
/**
 * In
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SERVCore NG
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * In Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class In implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'In';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'trn' => 'float',
        'chn' => 'float',
        'inst' => 'float',
        'unit' => 'string',
        'cat' => 'float',
        'filter' => 'float',
        'prior' => 'float',
        'token' => 'string',
        'not' => 'float'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'trn' => 'trn',
        'chn' => 'chn',
        'inst' => 'inst',
        'unit' => 'unit',
        'cat' => 'cat',
        'filter' => 'filter',
        'prior' => 'prior',
        'token' => 'token',
        'not' => 'not'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'trn' => 'setTrn',
        'chn' => 'setChn',
        'inst' => 'setInst',
        'unit' => 'setUnit',
        'cat' => 'setCat',
        'filter' => 'setFilter',
        'prior' => 'setPrior',
        'token' => 'setToken',
        'not' => 'setNot'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'trn' => 'getTrn',
        'chn' => 'getChn',
        'inst' => 'getInst',
        'unit' => 'getUnit',
        'cat' => 'getCat',
        'filter' => 'getFilter',
        'prior' => 'getPrior',
        'token' => 'getToken',
        'not' => 'getNot'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['trn'] = isset($data['trn']) ? $data['trn'] : null;
        $this->container['chn'] = isset($data['chn']) ? $data['chn'] : null;
        $this->container['inst'] = isset($data['inst']) ? $data['inst'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['cat'] = isset($data['cat']) ? $data['cat'] : null;
        $this->container['filter'] = isset($data['filter']) ? $data['filter'] : null;
        $this->container['prior'] = isset($data['prior']) ? $data['prior'] : null;
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['not'] = isset($data['not']) ? $data['not'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets trn
     * @return float
     */
    public function getTrn()
    {
        return $this->container['trn'];
    }

    /**
     * Sets trn
     * @param float $trn (Obrigatório) Identificação da Transação<br>8000 - Obtêm a lista de senhas<br>8001 - Solicita uma senha
     * @return $this
     */
    public function setTrn($trn)
    {
        $this->container['trn'] = $trn;

        return $this;
    }

    /**
     * Gets chn
     * @return float
     */
    public function getChn()
    {
        return $this->container['chn'];
    }

    /**
     * Sets chn
     * @param float $chn (Obrigatório) Canal a ser acessado<br>1 - CRM<br>2 - GONDOLA<br>3 - FEEDBACK<br>4 - MOBILE<br>5 - GESTÃO<br>6 - BACKOFFICE<br>7 - SORTEXT
     * @return $this
     */
    public function setChn($chn)
    {
        $this->container['chn'] = $chn;

        return $this;
    }

    /**
     * Gets inst
     * @return float
     */
    public function getInst()
    {
        return $this->container['inst'];
    }

    /**
     * Sets inst
     * @param float $inst (Opcional) Instituição de acesso. Caso não seja informado será considerada a instituição default do sistema.
     * @return $this
     */
    public function setInst($inst)
    {
        $this->container['inst'] = $inst;

        return $this;
    }

    /**
     * Gets unit
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     * @param string $unit (Obrigatório) Sigla da loja.
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets cat
     * @return float
     */
    public function getCat()
    {
        return $this->container['cat'];
    }

    /**
     * Sets cat
     * @param float $cat Categoria do setor.<br>Para transação 8000 o campo é opcional, caso o mesmo não seja informado serão retornadas senhas para todas as categorias.<br>Para transação 8001 o campo é obrigatório.
     * @return $this
     */
    public function setCat($cat)
    {
        $this->container['cat'] = $cat;

        return $this;
    }

    /**
     * Gets filter
     * @return float
     */
    public function getFilter()
    {
        return $this->container['filter'];
    }

    /**
     * Sets filter
     * @param float $filter (Opcional) Campo utilizado apenas para transação 8001.<br>0 - não retorna a lista de senhas (Default).<br>1 - Retorna a lista de senhas para a categoria e a loja informada.<br>2 - Retorna a lista de senhas para todas as categorias e a loja informada.
     * @return $this
     */
    public function setFilter($filter)
    {
        $this->container['filter'] = $filter;

        return $this;
    }

    /**
     * Gets prior
     * @return float
     */
    public function getPrior()
    {
        return $this->container['prior'];
    }

    /**
     * Sets prior
     * @param float $prior (Opcional) Prioridade da senha.<br>0 - Normal<br>1 - Prioritária<br>Para transação 8000 caso o mesmo não seja informado serão retornadas todas as senhas indepentende da prioridade.<br>Para a transação 8001 caso o mesmo não seja informado será solicitada uma senha com prioridade normal.
     * @return $this
     */
    public function setPrior($prior)
    {
        $this->container['prior'] = $prior;

        return $this;
    }

    /**
     * Gets token
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     * @param string $token (Opcional) Token seguro gerado pelo FCM (Firebase Cloud Messaging).<br>Caso não seja informado nenhuma notificação será enviada para um cliente Web ou Dispositivo IOS/Android.
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets not
     * @return float
     */
    public function getNot()
    {
        return $this->container['not'];
    }

    /**
     * Sets not
     * @param float $not (Opcional) Regra de notificação via FCM.<br>Caso o campo não seja informado o valor padrão será X.<br>Campo é composto por uma lógica binária:<br>bit 0 - 1 - notificar ou 0 - não notificar<br>bit 1 2 3 - número de senhas para ser notificado.<br>Exemplos:<br>0 1 0 - será notificado 2 senhas antes da solicitada.<br>0 1 1 -  será notificado 3 senhas antes da solicitada.<br>bit 4 - 0 - notificação sem som 1 - notificação com som.
     * @return $this
     */
    public function setNot($not)
    {
        $this->container['not'] = $not;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


